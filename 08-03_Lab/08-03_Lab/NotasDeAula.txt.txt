Prof: Daniel
08/03/22

Bibliografia
Java Exceçoes Caelum -> Exemplos de exceçoes
	"https://www.caelum.com.br/apostila-java-orientacao-objetos/excecoes-e-controle-de-erros#exercicio-para-comecar-com-os-conceitos"
_________________________________________________________________________________
int double 			-> usualmente operacoes
telefone	-> String	-> usualmente nao ha necessidade de fazer conta
CPF		-> String	-> conta char por char (testar se valido)
numRua		-> int		-> mais adequado para executar operacoes

---------------------------------------------------------------------------------
get -> ler, apenas recebe
	maioria das vezes mesmo tipo que o atributo
	retorna algum valor
	99% do tipo void
	param valor que sera recebido
	
set -> 

dividir para conquistar -> criar varios pequenos metodos especificos para cada 
	funcionalidade/acao

"backend" do codigo -> troca mensagens
	recebe parametro e faz return

"frontend" do codigo ->  interage

evitar fazer retornos para ver se funcionou ou nao
---------------------------------------------------------------------------------
				    EXCECOES
				    EXCECOES
				    EXCECOES

Existe uma hierarquia de excecoes
	runtimeexceptions -> excecoes de tempo de execucao / excecoes nao verificadas
		java lanca excecao apenas em tempo de execucao
		java nao te obriga a tratar
	FileIoException -> excecoes verificadas (obriga a tratar para compilar)
		java obriga a tratar excecao
		Arquivo ->	try {
					new java.io.FileInputStream(arquivo.txt);
				}catch (java.io.FileNotFoundException e)
throw 	-> lancar o erro
	-> Proprio java lanca

Erro, rasto de pilha -> stacktrace


try catch
	-> tenta executar o bloco de codigo
		se houver algum erro -> catch para podermos tentar resolver o erro
	-> evita que o main seja desempilhado e o codigo acabe
	(NullPointerException e) -> e - objeto
	podem ser usados varios catchs


THROWS	
	LANCA excecoes para o PROXIMO metodo -> proxima pilha
		Avisa a possibilidade do metodo lancar a exception, obrigando
		 outro metodo a precupar com essa excecao
	public static void metodo() throws java.io.FileNotFoundException {

	ou usar throws ou try, catch

		-----------------------------------------
	NullPointerException -> tentar usar um objeto que esta apontando para nulo
		falha de instanciacao
		"objeto = null;"
	throws IOException, SQLException {

THROW
	LANCA a exception IPERATIVAMENTE
		Lanca ativamente a exception
	if (x < y)
		throw new RuntimeException();

CRIANDO UMA EXCECAO
	public class SaldoInsuficienteException extends RuntimeException{
		-> otima maneira de resolver problemas, pois cria uma especializa 
		

	extends -> herdando excecoes
		ha varias classes de exceptions para serem herdadas (vide .png)
		 utilizar a que melhor para cada contexto
		verificada	-> utilize Exception
			precisa usar try catch para resolver ou throws
		nao verificada	-> utilize RuntimeException

---------------------------------------------------------------------------------
	